"""
Views for authapi app

Views
-----
:class:`LoginAPI`: Login view
:class:`RegisterAPI`: Register view
:class:`UserAPI`: User view
:class:`EmailValidationAPI`: Email validation view

Revision History
----------------
* 2020-02-??: Created by @kms1212.
* 2020-02-18: Documented by @kms1212.
"""

from django.core.exceptions import ValidationError
from django.template.loader import render_to_string
from django.core.mail import EmailMultiAlternatives
from django.utils.html import strip_tags

from rest_framework import generics, status, permissions
from rest_framework.response import Response

from knox.models import AuthToken

from jsis.env import SERVER_DOMAIN

from .models import UserAccount
from .tokens import account_activation_token
from .serializers import LoginSerializer, UserSerializer, DetailedUserSerializer, RegisterSerializer

# Create your views here.
class LoginAPI(generics.GenericAPIView):
    """
    Login API View

    Description (Generated by CodeGPT)
    ----------------------------------
    This view handles the login process for a user.
    It takes in a LoginSerializer and validates the data.
    If the data is valid, it returns a DetailedUserSerializer and an authentication token.

    Methods
    -------
    :post: Login with given data (username, password)

    Revision History
    ----------------
    * 2020-02-??: Created by @kms1212.
    * 2020-02-18: Documented by @kms1212.
    """

    serializer_class = LoginSerializer

    def post(self, request):
        """
        POST method for LoginAPI
        """
        serializer = self.get_serializer(data=request.data)

        try:
            serializer.is_valid(raise_exception=True)
        except ValidationError as error:
            return Response(
                {
                    "message": error.messages
                },
                status=status.HTTP_400_BAD_REQUEST
            )

        user = serializer.validated_data

        return Response(
            {
                "user": DetailedUserSerializer(user, context=self.get_serializer_context()).data,
                "token": AuthToken.objects.create(user)[1],
            }
        )


class RegisterAPI(generics.GenericAPIView):
    """
    Register API View

    Description (Generated by CodeGPT)
    ----------------------------------
    This view handles the registration process for a user.
    It takes in a RegisterSerializer and validates the data.
    If the data is valid, it saves the user and sends an email with an account activation token.

    Methods
    -------
    :post: Register with given data

    Revision History
    ----------------
    * 2020-02-??: Created by @kms1212.
    * 2020-02-18: Documented by @kms1212.
    """
    serializer_class = RegisterSerializer

    def post(self, request):
        """
        POST method for RegisterAPI
        """
        serializer = self.get_serializer(data=request.data)

        try:
            serializer.is_valid(raise_exception=True)
        except ValidationError as error:
            return Response(
                {
                    "message": error.messages
                },
                status=status.HTTP_400_BAD_REQUEST
            )

        user = serializer.save()

        token = account_activation_token.make_token(user)
        html_msg = render_to_string('authapi/email_template.html', {
                'server_domain': SERVER_DOMAIN,
                'token': token,
                'uid': user.pk,
            })

        email = EmailMultiAlternatives('[JSIS] 부산중앙고등학교 재학생인트라넷서비스 회원가입 인증 메일',
            strip_tags(html_msg),
            to=[user.email])
        email.attach_alternative(html_msg, 'text/html')
        email.send()

        return Response(
            {
                "user": DetailedUserSerializer(user, context=self.get_serializer_context()).data,
            }
        )


class UserAPI(generics.GenericAPIView):
    """
    User API View

    Description (Generated by CodeGPT)
    ----------------------------------
    This view handles the getting of a user's information.
    It requires authentication and returns a DetailedUserSerializer with the user's data.

    Methods
    -------
    :get: Get user's data

    Revision History
    ----------------
    * 2020-02-??: Created by @kms1212.
    * 2020-02-18: Documented by @kms1212.
    """
    permission_classes = [ permissions.IsAuthenticated, ]

    def get(self, request):
        """
        GET method for UserAPI
        """
        userid = request.GET.get('userid', None)

        if userid is not None:
            user = UserAccount.objects.get(userid=request.GET['userid'])
            user_serialized = UserSerializer(user, context=self.get_serializer_context()).data
        else:
            user = request.user
            user_serialized = DetailedUserSerializer(user, context=self.get_serializer_context()).data

        return Response(user_serialized)


class EmailValidationAPI(generics.GenericAPIView):
    """
    Email Validation API View

    Description (Generated by CodeGPT)
    ----------------------------------
    This view handles the validation of an account activation token.
    It takes in a uid and token and checks if the token is valid.
    If the token is valid, it sets the user's is_active to True and returns a message.
    If the token is not valid, it returns a message with a 404 status code.

    Methods
    -------
    :get: Validate token

    Revision History
    ----------------
    * 2020-02-??: Created by @kms1212.
    * 2020-02-18: Documented by @kms1212.
    """
    def get(self, _request, uid, token):
        """
        GET method for EmailValidationAPI
        """
        user = UserAccount.objects.get(pk=uid)

        if user is not None and account_activation_token.check_token(user, token):
            user.is_active = True
            user.save()

            return Response(
                {
                    "message": "Your account is activated."
                }
            )

        return Response(
            {
                "message": "Token not found."
            },
            status=status.HTTP_404_NOT_FOUND
        )
